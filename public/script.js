// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let currentUser = null;
let allFlights = [];
let allUsers = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
function initSupabase() {
    const SUPABASE_URL = 'https://zswbiikivjvuoolmufzd.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inpzd2JpaWtpdmp2dW9vbG11ZnpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwODExMTYsImV4cCI6MjA3MjY1NzExNn0.tlJDNSTL-eK1NzMqdiZliHPbHMBgDZfddnhW78I9tyQ';
    return supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
}

//const supabase = initSupabase();
let supabase = null;
// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initApp() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const initData = tg.initDataUnsafe;
        const tgId = initData.user?.id;
        const userName = `${initData.user?.first_name} ${initData.user?.last_name || ''}`.trim();
        
        if (!tgId) {
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        supabase = await initSupabase();
        currentUser = await getOrCreateUser(tgId, userName);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–æ–ª—å—é
        updateUIForRole(currentUser.role);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await loadFlights();
        if (currentUser.role === 'admin') {
            await loadUsers();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getOrCreateUser(tgId, userName) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingUser, error: selectError } = await supabase
        .from('users')
        .select('*')
        .eq('tg_id', tgId)
        .single();
    
    if (selectError && selectError.code !== 'PGRST116') {
        throw selectError;
    }
    
    if (existingUser) {
        return existingUser;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é pilot –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const { data: newUser, error: insertError } = await supabase
        .from('users')
        .insert([{ tg_id: tgId, name: userName, role: 'pilot' }])
        .select()
        .single();
    
    if (insertError) {
        throw insertError;
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await logAction('create', 'users', newUser.id, null, newUser);
    
    return newUser;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–µ—Ç–æ–≤
async function loadFlights() {
    try {
        let query = supabase
            .from('flights')
            .select('*')
            .order('date', { ascending: false });
        
        // –î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞—Ç—Ä–∞—Ç—ã –∏ –ø—Ä–∏–±—ã–ª—å
        if (currentUser.role === 'manager') {
            query = query.select('id, date, route, manager_comment, pilot_comment, status, created_at');
        }
        
        const { data, error } = await query;
        
        if (error) throw error;
        
        allFlights = data;
        renderFlightsTable(allFlights);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ—Ç–æ–≤:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–µ—Ç–∞—Ö');
    }
}

// –†–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª–µ—Ç–æ–≤
function renderFlightsTable(flights) {
    const container = document.getElementById('flights-table-container');
    
    if (flights.length === 0) {
        container.innerHTML = '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–∞—Ö</p>';
        return;
    }
    
    let tableHTML = `
        <table class="flights-table">
            <thead>
                <tr>
                    <th>–î–∞—Ç–∞</th>
                    <th>–ú–∞—Ä—à—Ä—É—Ç</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–ö–æ–º–º–µ–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞</th>
                    <th>–ö–æ–º–º–µ–Ω—Ç –ø–∏–ª–æ—Ç–∞</th>
                    ${currentUser.role !== 'manager' ? '<th>–ó–∞—Ç—Ä–∞—Ç—ã</th><th>–ü—Ä–∏–±—ã–ª—å</th>' : ''}
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    flights.forEach(flight => {
        const statusIcon = getStatusIcon(flight.status);
        const formattedDate = new Date(flight.date).toLocaleDateString('ru-RU');
        
        tableHTML += `
            <tr>
                <td>${formattedDate}</td>
                <td>${escapeHtml(flight.route)}</td>
                <td><span class="status-badge ${flight.status}">${statusIcon} ${getStatusText(flight.status)}</span></td>
                <td>${escapeHtml(flight.manager_comment || '')}</td>
                <td>${escapeHtml(flight.pilot_comment || '')}</td>
                ${currentUser.role !== 'manager' ? 
                    `<td>${flight.costs ? flight.costs.toFixed(2) : '0.00'}</td>
                     <td>${flight.profit ? flight.profit.toFixed(2) : '0.00'}</td>` : ''}
                <td>
                    ${canEditFlight(flight) ? `<button class="btn-edit" onclick="editFlight(${flight.id})">‚úèÔ∏è</button>` : ''}
                </td>
            </tr>
        `;
    });
    
    tableHTML += `</tbody></table>`;
    container.innerHTML = tableHTML;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ—Ç–∞
function canEditFlight(flight) {
    switch (currentUser.role) {
        case 'admin':
            return true;
        case 'manager':
            return flight.status === 'planned' || flight.status === 'cancelled';
        case 'pilot':
            return flight.status === 'planned' || flight.status === 'in-progress';
        case 'accountant':
            return true; // –ù–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª—è costs –∏ profit
        default:
            return false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–æ–ª—å—é
function updateUIForRole(role) {
    const userInfoEl = document.getElementById('user-info');
    userInfoEl.innerHTML = `${currentUser.name} (${getRoleText(role)})`;
    
    const tabsContainer = document.getElementById('role-tabs');
    let tabsHTML = `<button class="tab-btn active" data-tab="flights">–†–µ–π—Å—ã</button>`;
    
    if (role === 'admin') {
        tabsHTML += `<button class="tab-btn" data-tab="users">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>`;
        tabsHTML += `<button class="tab-btn" data-tab="stats">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>`;
    }
    
    if (role === 'admin' || role === 'accountant') {
        tabsHTML += `<button class="tab-btn" data-tab="stats">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>`;
    }
    
    tabsContainer.innerHTML = tabsHTML;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            switchTab(btn.dataset.tab);
        });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (role === 'manager' || role === 'admin') {
        const flightsView = document.getElementById('flights-view');
        const createButton = document.createElement('button');
        createButton.id = 'create-flight';
        createButton.className = 'btn-primary';
        createButton.innerHTML = '<i class="fas fa-plus"></i> –°–æ–∑–¥–∞—Ç—å —Ä–µ–π—Å';
        createButton.onclick = () => createFlight();
        flightsView.querySelector('.filters').appendChild(createButton);
    }
}

// –ò–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
function getStatusIcon(status) {
    switch (status) {
        case 'planned': return 'üìÖ';
        case 'cancelled': return '‚ùå';
        case 'in-progress': return '‚úàÔ∏è';
        case 'completed': return '‚úÖ';
        default: return '';
    }
}

// –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
function getStatusText(status) {
    const statusTexts = {
        'planned': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
        'in-progress': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
        'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω'
    };
    return statusTexts[status] || status;
}

// –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–µ–π
function getRoleText(role) {
    const roleTexts = {
        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        'accountant': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä',
        'pilot': '–ü–∏–ª–æ—Ç'
    };
    return roleTexts[role] || role;
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', initApp);